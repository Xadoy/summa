syntax = "proto3";
package summa.proto;

import "utils.proto";

// Manages indices
service IndexApi {
  // Attaches index to Summa server. Attaching allows to incorporate and start using of downloaded or network indices
  rpc attach_index(AttachIndexRequest) returns (AttachIndexResponse) {}
  // Committing all collected writes to the index
  rpc commit_index (CommitIndexRequest) returns (CommitIndexResponse) {}
  // Creates new index from scratch
  rpc create_index (CreateIndexRequest) returns (CreateIndexResponse) {}
  // Deletes single document from the index by its primary key (therefore, index must have primary key)
  rpc delete_document (DeleteDocumentRequest) returns (DeleteDocumentResponse) {}
  // Deletes index and physically removes file in the case of `FileEngine`
  rpc delete_index (DeleteIndexRequest) returns (DeleteIndexResponse) {}
  // Gets all existing index aliases
  rpc get_indices_aliases (GetIndicesAliasesRequest) returns (GetIndicesAliasesResponse) {}
  // Gets index description
  rpc get_index (GetIndexRequest) returns (GetIndexResponse) {}
  // Gets all existing index descriptions
  rpc get_indices (GetIndicesRequest) returns (GetIndicesResponse) {}
  // Adds document to the index in a streaming way
  rpc index_document_stream (stream IndexDocumentStreamRequest) returns (IndexDocumentStreamResponse) {}
  // Adds document to the index
  rpc index_document (IndexDocumentRequest) returns (IndexDocumentResponse) {}
  // Merges multiple segments into a single one. Used for service purposes
  rpc merge_segments (MergeSegmentsRequest) returns (MergeSegmentsResponse) {}
  // Sets or replaces existing index alias
  rpc set_index_alias (SetIndexAliasRequest) returns (SetIndexAliasResponse) {}
  // Removes deletions from all segments
  rpc vacuum_index (VacuumIndexRequest) returns (VacuumIndexResponse) {}
}

// Possible primary keys
message PrimaryKey {
  oneof value {
    string str = 1;
    int64 i64 = 2;
  }
}

// Attach file engine request
message AttachFileEngineRequest {}

// Attach remote engine request
message AttachRemoteEngineRequest {}

// Attach file engine request
message AttachIpfsEngineRequest {
  string cid = 1;
}

// Attach index request
message AttachIndexRequest {
 string index_name = 1;
 oneof request {
   AttachFileEngineRequest attach_file_engine_request = 2;
   AttachRemoteEngineRequest attach_remote_engine_request = 3;
   AttachIpfsEngineRequest attach_ipfs_engine_request = 4;
 }
}

message AttachIndexResponse {
  IndexDescription index = 1;
}

message CommitIndexRequest {
  string index_alias = 1;
  CommitMode commit_mode = 2;
}

message CommitIndexResponse {
  optional double elapsed_secs = 2;
}

message SortByField {
  string field = 1;
  Order order = 2;
}

enum CreateIndexEngineRequest {
  File = 0;
  Memory = 1;
}

message CreateIndexRequest {
  string index_name = 1;
  CreateIndexEngineRequest index_engine = 2;
  string schema = 3;
  optional string primary_key = 4;
  repeated string default_fields = 5;
  repeated string multi_fields = 6;
  Compression compression = 7;
  optional uint32 blocksize = 8;
  optional SortByField sort_by_field = 9;
}

message CreateIndexResponse {
  IndexDescription index = 1;
}

message DeleteDocumentRequest {
  string index_alias = 1;
  PrimaryKey primary_key = 2;
}

message DeleteDocumentResponse {}

message DeleteIndexRequest {
  string index_name = 1;
}

message DeleteIndexResponse {}

message GetIndicesAliasesRequest {}

message GetIndicesAliasesResponse {
  map<string, string> indices_aliases = 1;
}

message GetIndexRequest {
  string index_alias = 1;
}

message GetIndexResponse {
  IndexDescription index = 1;
}

message GetIndicesRequest {}

message GetIndicesResponse {
  repeated IndexDescription indices = 1;
}

message IndexDocumentStreamRequest {
  string index_alias = 1;
  repeated bytes documents = 2;
}

message IndexDocumentStreamResponse {
  uint64 success_docs = 1;
  uint64 failed_docs = 2;
  double elapsed_secs = 3;
}

message IndexDocumentRequest {
  string index_alias = 1;
  bytes document = 2;
}

message IndexDocumentResponse {}

message MergeSegmentsRequest {
  string index_alias = 1;
  repeated string segment_ids = 2;
}

message MergeSegmentsResponse {}

message SetIndexAliasRequest {
  string index_alias = 1;
  string index_name = 2;
}

message SetIndexAliasResponse {
  optional string old_index_name = 1;
}

message VacuumIndexRequest {
  string index_alias = 1;
}

message VacuumIndexResponse {
  // repeated string deleted_files = 1;
}

// Extra structures

enum Compression {
  None = 0;
  Brotli = 1;
  Lz4 = 2;
  Snappy = 3;
  Zstd = 4;
}

message FileEngineConfig {
  string path = 1;
}
message MemoryEngineConfig {
  string schema = 1;
}
message ChunkedCacheConfig {
  uint64 chunk_size = 1;
  optional uint64 cache_size = 2;
}
message RemoteEngineConfig {
  string method = 1;
  string url_template = 2;
  map<string, string> headers_template = 3;
  ChunkedCacheConfig chunked_cache_config = 4;
}
message IpfsEngineConfig {
  string cid = 1;
}

message IndexEngineConfig {
  oneof config {
    FileEngineConfig file = 1;
    MemoryEngineConfig memory = 2;
    RemoteEngineConfig remote = 3;
    IpfsEngineConfig ipfs = 4;
  }
}

message IndexDescription {
  string index_name = 1;
  repeated string index_aliases = 2;
  IndexEngineConfig index_engine = 3;
  uint64 num_docs = 4;
  Compression compression = 5;
}

message IndexDocumentOperation {
  bytes document = 1;
}

message IndexOperation {
 oneof operation {
   IndexDocumentOperation index_document = 2;
 }
}

enum CommitMode {
  Async = 0;
  Sync = 1;
}